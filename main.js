// Generated by CoffeeScript 1.9.3
(function() {
  var Deferred, ScssFile, _, fs, path;

  fs = require('fs');

  _ = require('underscore');

  path = require('path');

  Deferred = require('when');

  ScssFile = (function() {
    ScssFile.prototype.importReg = new RegExp(/@import\s*"(.*?)"/g);

    function ScssFile(pathToFile, options) {
      var base, dir, promises;
      this.options = _.extend({
        encoding: 'utf-8',
        baseDir: null
      }, options);
      dir = path.dirname(pathToFile);
      this.deps = [];
      promises = [];
      if (!fs.existsSync(pathToFile)) {
        if (typeof (base = this.options).callback === "function") {
          base.callback();
        }
        return;
      }
      fs.readFile(pathToFile, this.options.encoding, (function(_this) {
        return function(err, content) {
          var base1, base2, imports;
          if (err || !content) {
            console.log(err);
            if (typeof (base1 = _this.options).callback === "function") {
              base1.callback();
            }
            return;
          }
          imports = content.match(_this.importReg);
          if (!Array.isArray(imports)) {
            if (typeof (base2 = _this.options).callback === "function") {
              base2.callback();
            }
            return;
          }
          imports.forEach(function(importStr) {
            var arRelative, dfd, fileExt, fileName, fileNameFromImport, filePathFromImport, fullPath, fullPathWrong, isWrongFileName, relativePath, relativePathWrong, shouldCheckForWrongName;
            dfd = Deferred.defer();
            filePathFromImport = importStr.replace(/@import\s*/ig, '').replace(/"/g, '');
            fileNameFromImport = filePathFromImport.split("/");
            fileNameFromImport = fileNameFromImport[fileNameFromImport.length - 1];
            relativePath = filePathFromImport;
            if (fileNameFromImport.charAt(0) !== '_') {
              arRelative = relativePath.split('/');
              arRelative[arRelative.length - 1] = "_" + arRelative[arRelative.length - 1];
              relativePath = arRelative.join('/');
            }
            relativePathWrong = filePathFromImport;
            fullPath = path.resolve(dir, relativePath);
            fullPathWrong = path.resolve(dir, relativePathWrong);
            shouldCheckForWrongName = false;
            if (fs.existsSync(fullPath + ".scss")) {
              fullPath = fullPath + ".scss";
            } else if (fs.existsSync(fullPath + ".sass")) {
              fullPath = fullPath + ".sass";
            } else if (_this.options.baseDir) {
              fullPath = path.resolve(_this.options.baseDir, relativePath);
              if (fs.existsSync(fullPath + ".scss")) {
                fullPath = fullPath + ".scss";
              } else if (fs.existsSync(fullPath + ".sass")) {
                fullPath = fullPath + ".sass";
              } else {
                shouldCheckForWrongName = true;
              }
            } else {
              shouldCheckForWrongName = true;
            }
            if (shouldCheckForWrongName) {
              isWrongFileName = false;
              fileName = fileNameFromImport;
              fileExt = void 0;
              if (_this.options.baseDir) {
                fullPathWrong = path.resolve(_this.options.baseDir, relativePathWrong);
              }
              if (fs.existsSync(fullPathWrong + ".scss")) {
                isWrongFileName = true;
                fileExt = "scss";
              }
              if (fs.existsSync(fullPathWrong + ".sass")) {
                isWrongFileName = true;
                fileExt = "sass";
              }
              if (isWrongFileName) {
                fileName += "." + fileExt;
                console.log("\x1b[31m", "[scss-dependency] rename file " + fileName + " to _" + fileName + " (full path: " + fullPathWrong + ")");
              }
              return;
            }
            _this.deps.push(fullPath);
            new ScssFile(fullPath, _.extend({}, _this.options, {
              callback: function(list) {
                if (list == null) {
                  list = [];
                }
                _this.deps = _this.deps.concat(list);
                return dfd.resolve();
              }
            }));
            return promises.push(dfd.promise);
          });
          return Deferred.all(promises).then(function() {
            var base3;
            return typeof (base3 = _this.options).callback === "function" ? base3.callback(_this.deps) : void 0;
          });
        };
      })(this));
    }

    return ScssFile;

  })();

  module.exports = function(file, options, callback) {
    if (_.isFunction(options)) {
      callback = options;
      options = {};
    }
    return new ScssFile(file, _.extend(options, {
      callback: callback
    }));
  };

}).call(this);
